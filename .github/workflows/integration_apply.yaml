name: Integration Testing - Apply

on:
  workflow_dispatch:
  push:
    branches:
      - dev

env:
  GITHUB_TOKEN: ${{ secrets.GH_ACTIONS_BOT }}   

permissions:
  id-token: write
  contents: read

jobs:
  inform_about_apply:
    name: Inform About Apply
    runs-on: ubuntu-latest

    steps:
      - id: generate-token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}    
      - name: Inform on Pull Request that Apply is running
        uses: mshick/add-pr-comment@v1
        with:
          repo-token: ${{ steps.generate-token.outputs.token }}
          message: |
            ***Running terraform apply***
            Results will display here momentarily...  
  plan_and_apply:
    name: Plan and Apply
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - environment: Development
            url: https://app.terraform.io/app/esg_se_xdr_demo_dev/workspaces/terraform-aws-sophos-firewall/runs

    environment: 
      name: ${{ matrix.environment }}
      url: ${{ matrix.url }}

    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - id: generate-token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.SOPHOS_DEV_DEPLOY_ROLE }}
          aws-region: us-west-2
          role-session-name: OIDCSession    
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
         cli_config_credentials_token: ${{ secrets.SOPHOS_TF_API_TOKEN }}
      - name: Terraform init
        run: |
          REPO="${{ github.repository }}"
          WORKSPACE="${REPO#*/}"

          cat >> remote.tf<<EOF
          terraform {
            backend "remote" {}
          }
          EOF

          cat >> config.remote.tfbackend<<EOF
          hostname = "app.terraform.io"
          organization = "${{ secrets.SOPHOS_TF_ORGANIZATION }}"
          workspaces { name = "$WORKSPACE" }
          EOF

          terraform init -backend-config=config.remote.tfbackend
      - name: Terraform Plan
        id: plan
        continue-on-error: true
        run: |
          terraform plan -input=false -no-color
        env:
          AWS_ROLE_ARN: ${{ secrets.SOPHOS_DEV_DEPLOY_ROLE }}
          AWS_ROLE_SESSION_NAME: OIDCSession  
      - name: Reformat Plan
        if: steps.plan.outcome == 'success'
        run: |
          echo '${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}' \
          | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > plan.txt  
      - name: Put Plan in Github Env Var
        if: steps.plan.outcome == 'success'
        run: |
          PLAN=$(cat plan.txt)
          echo "PLAN<<EOF" >> $GITHUB_ENV
          echo "$PLAN" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV         
      - name: Apply Terraform
        if: steps.plan.outcome == 'success'
        id: apply
        continue-on-error: true
        run: |
          terraform apply \
            -input=false \
            -no-color
            -auto-approve
        env:
          AWS_ROLE_ARN: ${{ secrets.SOPHOS_DEV_DEPLOY_ROLE }}
          AWS_ROLE_SESSION_NAME: OIDCSession                 
      - name: Post Plan and Apply to GitHub PR
        if: steps.plan.outcome == 'success' && steps.apply.outcome == 'success'
        uses: mshick/add-pr-comment@v1
        with:
          repo-token: ${{ steps.generate-token.outputs.token }}
          message: |
            Applying **${{ matrix.environment }}**:

            ```diff
            ${{ env.PLAN }}
            ```

            ```
            ${{ steps.apply.outputs.stdout }}
            ```              
      - name: Post Plan Failure
        if: steps.plan.outcome == 'failure'
        uses: mshick/add-pr-comment@v1
        with:
          repo-token: ${{ steps.generate-token.outputs.token }}
          message: |
            Plan failed for **${{ matrix.environment }}**:

            ```
            ${{ steps.plan.outputs.stderr }}
            ```            

      - name: Post Apply Failure
        if: steps.apply.outcome == 'failure'
        uses: mshick/add-pr-comment@v1
        with:
          repo-token: ${{ steps.generate-token.outputs.token }}
          message: |
            Apply failed for **${{ matrix.environment }}**:

            ```
            ${{ steps.apply.outputs.stderr }}
            ```               
      




